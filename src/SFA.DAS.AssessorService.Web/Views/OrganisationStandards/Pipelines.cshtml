@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Mvc.Localization
@using SFA.DAS.AssessorService.Domain.Paging
@model SFA.DAS.AssessorService.Web.ViewModels.OrganisationStandards.OrderedListResultViewModel
@{
    ViewBag.Title = "Pipeline";
    Layout = "_DashboardLayout";
}

<main class="govuk-main-wrapper " id="main-content" role="main">

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h1 class="govuk-heading-xl">Pipeline</h1>
        </div>
    </div>

    @if (Model.Response.Items.Any())
    {
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                <div class="govuk-inset-text">
                    Assessment numbers may vary because of data changes on the individualised learner record (ILR) and certification service.
                </div>
            </div>
            <div class="govuk-grid-column-one-third">
                <div class="govuk-form-group align-button-right">
                    <form asp-controller="OrganisationStandards" asp-action="ExportEpaPipelineAsCsv" method="get">
                        <button type="submit" class="govuk-button">Download as csv</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">
                <table id="pipeline" class="govuk-table govuk-table--small responsive striped">
                    <thead class="govuk-table__head">
                        <tr class="govuk-table__row">
                            <th class="govuk-table__header" scope="col">
                                @Localizer["Standard"]
                            </th>
                            <th class="govuk-table__header govuk-table__header--numeric" scope="col">
                                @Localizer["Apprentices"]
                            </th>
                        @if (Model.Response.Items.Any())
                        {
                            <th class="govuk-table__header govuk-table__header--numeric" aria-sort="@(Model.OrderDirection)">
                                <a asp-controller="OrganisationStandards"
                                    asp-action="OrderPipeline"
                                    asp-route-pageIndex="@(Model.Response.PageIndex)"
                                    asp-route-orderBy="EstimateDate"
                                    asp-route-orderDirection="@(Model.OrderDirection)">
                                    @Localizer["Estimated EPA date"]
                                </a>
                            </th>
                        }
                        else
                        {
                            <th class="govuk-table__header govuk-table__header--numeric" aria-sort="@(Model.OrderDirection)">
                                @Localizer["Estimated Gateway"]
                            </th>
                        }
                        </tr>
                    </thead>
                    <tbody class="govuk-table__body" scope="col">
                    @foreach (var item in Model.Response.Items)
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell das-no-wrap" data-label="@Localizer["StandardName"]">
                                @Html.DisplayFor(modelItem => item.StandardName)
                            </td>
                            <td class="govuk-table__cell govuk-table__cell--numeric" data-label="@Localizer["Apprenticeds"]">
                                @Html.DisplayFor(modelItem => item.Pipeline)
                            </td>
                            <td class="govuk-table__cell das-no-wrap govuk-table__cell--numeric govuk-!-font-weight-bold" data-label="@Localizer["EstimatedDate"]" data-sort-value="@Localizer["EstimatedDate"]">
                                @Html.DisplayFor(modelItem => item.EstimatedDate)
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                <p class="govuk-body">
                    Assessment numbers may vary because of data changes on the individualised learner record (ILR) and certification service.
                </p>
                <div class="info-summary">
                    <h3 class="govuk-heading-m">Your pipeline is empty.</h3>
                </div>
            </div>
        </div>
    }

    @if (Model.Response.HasPreviousPage || Model.Response.HasNextPage)
    {
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">
                <div class="page-navigation">

                    @if (Model.Response.HasPreviousPage)
                    {
                        <a asp-action="Pipeline"
                        asp-controller="OrganisationStandards"
                        asp-route-pageIndex="@(Model.Response.PageIndex - 1)"
                        class="govuk-link previous">
                            <i class="arrow-button icon-left-open">&#xe800;</i>
                            <span class="description">Previous <span class="hide-mob">page</span></span>
                            <span class="counter">Page <span class="prevPage">@(Model.Response.PageIndex - 1)</span> of <span class="totalPage">@(Model.Response.TotalPages)</span></span>
                        </a>
                    }

                    @if (Model.Response.HasNextPage)
                    {
                        <a asp-controller="OrganisationStandards"
                        asp-action="Pipeline"
                        asp-route-pageIndex="@(Model.Response.PageIndex + 1)"
                        class="govuk-link next">
                            <i class="arrow-button icon-right-open">&#xe801;</i>
                            <span class="description">Next <span class="hide-mob">page</span></span>
                            <span class="counter">Page <span class="nextPage">@(Model.Response.PageIndex + 1)</span> of <span class="totalPage">@(Model.Response.TotalPages)</span></span>
                        </a>
                    }

                </div>
            </div>
        </div>
    }
</main>