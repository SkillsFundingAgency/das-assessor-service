// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.AssessorService.Application.Api.Specflow.Tests.Organisations.Maintenance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Maintain Organisations through the SFA.DAS.AssessorService.Application.Api")]
    [NUnit.Framework.CategoryAttribute("maintainOrganisations")]
    public partial class MaintainOrganisationsThroughTheSFA_DAS_AssessorService_Application_ApiFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OrganisationMaintenance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Maintain Organisations through the SFA.DAS.AssessorService.Application.Api", "\tIn order to be able to Modify Organisations\r\n\tAs a System\r\n\tI want to be be able" +
                    " to maintain Organisations", ProgrammingLanguage.CSharp, new string[] {
                        "maintainOrganisations"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Organisation With No Primary Contact")]
        public virtual void CreateAnOrganisationWithNoPrimaryContact()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Organisation With No Primary Contact", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table1.AddRow(new string[] {
                        "Test",
                        "99999999",
                        "10033333",
                        "james1234"});
#line 9
 testRunner.When("I Create an Organisation", ((string)(null)), table1, "When ");
#line 12
 testRunner.Then("the response http status should be Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("the Location Header should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("the Organisation should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("the Organisation Status should be set to New", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Organisation With Invalid UkPrn")]
        public virtual void CreateAnOrganisationWithInvalidUkPrn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Organisation With Invalid UkPrn", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table2.AddRow(new string[] {
                        "Test",
                        "99999998",
                        "14",
                        "james1234"});
#line 19
    testRunner.When("I Create an Organisation", ((string)(null)), table2, "When ");
#line 22
 testRunner.Then("the response http status should be Bad Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("the response message should contain Request must contain a valid UKPRN as defined" +
                    " in the UK Register of Learning Providers (UKRLP) is 8 digits in the format 1000" +
                    "0000 – 99999999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an Organisation Which Already Exists")]
        public virtual void CreateAnOrganisationWhichAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an Organisation Which Already Exists", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table3.AddRow(new string[] {
                        "Test",
                        "99999988",
                        "10033333",
                        "james1234"});
#line 27
  testRunner.When("I Create an Organisation", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table4.AddRow(new string[] {
                        "Test",
                        "99999988",
                        "10033333",
                        "james1234"});
#line 30
    testRunner.When("I Create an Organisation", ((string)(null)), table4, "When ");
#line 33
 testRunner.Then("the response http status should be Bad Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("the response message should contain Organisation Has Already Been Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an Organisation Succesfully")]
        public virtual void UpdateAnOrganisationSuccesfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an Organisation Succesfully", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table5.AddRow(new string[] {
                        "Test Name",
                        "99999999",
                        "10033670",
                        ""});
#line 38
 testRunner.When("I Update an Organisation", ((string)(null)), table5, "When ");
#line 41
 testRunner.Then("the response http status should be No Content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And("the Update should have occured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an Organisation That does Not Exist")]
        public virtual void UpdateAnOrganisationThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an Organisation That does Not Exist", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table6.AddRow(new string[] {
                        "Test Name",
                        "99999999",
                        "10005333",
                        "james1234"});
#line 46
 testRunner.When("I Update an Organisation With invalid Id", ((string)(null)), table6, "When ");
#line 49
 testRunner.Then("the response http status should be Bad Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an Organisation with invalid PrimaryContact")]
        public virtual void UpdateAnOrganisationWithInvalidPrimaryContact()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an Organisation with invalid PrimaryContact", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table7.AddRow(new string[] {
                        "Test Name",
                        "99999999",
                        "14",
                        "james1234"});
#line 53
 testRunner.When("I Update an Organisation With Invalid Primary Contact", ((string)(null)), table7, "When ");
#line 56
 testRunner.Then("the response http status should be Bad Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an Organisation with valid PrimaryContact")]
        public virtual void UpdateAnOrganisationWithValidPrimaryContact()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an Organisation with valid PrimaryContact", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table8.AddRow(new string[] {
                        "Test Name",
                        "1234",
                        "10033670",
                        "james1234"});
#line 60
 testRunner.When("I Update an Organisation With valid Primary Contact", ((string)(null)), table8, "When ");
#line 63
 testRunner.Then("the response http status should be No Content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("the Organisation Status should be persisted as Live", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete an Organisation")]
        public virtual void DeleteAnOrganisation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an Organisation", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table9.AddRow(new string[] {
                        "Test",
                        "99999777",
                        "10033444",
                        "james1234"});
#line 68
 testRunner.When("I Delete an Organisation", ((string)(null)), table9, "When ");
#line 71
 testRunner.Then("the response http status should be No Content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.And("the Organisation should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeat Deleting an Organisation")]
        public virtual void RepeatDeletingAnOrganisation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeat Deleting an Organisation", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("System Has access to the SFA.DAS.AssessmentOrgs.Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "EndPointAssessorName",
                        "EndPointAssessorOrganisationId",
                        "EndPointAssessorUkprn",
                        "PrimaryContact"});
            table10.AddRow(new string[] {
                        "Test",
                        "99999778",
                        "10033444",
                        "james1234"});
#line 76
 testRunner.When("I Delete an Organisation Twice", ((string)(null)), table10, "When ");
#line 79
 testRunner.Then("the response http status should be No Content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
 testRunner.And("the Organisation should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
