parameters:  
  Environment:
  ServiceConnection:
  ApimServiceConnection:
  OverrideBlockOnPossibleDataLoss: false
  AppRoleAssignmentsServiceConnection:

jobs:
- deployment: DeployResources
  pool:
    name: DAS - Continuous Deployment Agents
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/wait-azure-devops-deployment.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            EnvironmentId: $(Environment.Id)
            PipelineName: $(Build.DefinitionName)
            RunId: $(Build.BuildId)
        - template: azure-pipelines-templates/deploy/step/set-backendaccessrestrictions-variable.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SharedEnvResourceGroup: $(SharedEnvResourceGroup)
            SharedEnvVirtualNetworkName : $(SharedEnvVirtualNetworkName)
            BackEndAccessRestrictionsExcludedSubnets: $(BackEndAccessRestrictionsExcludedSubnets)
            ResourceEnvironmentName: $(ResourceEnvironmentName)
            UnrestrictedEnvironments: $(UnrestrictedEnvironments)
            UptimeMonitoringAccessRestrictions: $(UptimeMonitoringAccessRestrictions)
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: $(SubscriptionId)
            Location: $(ResourceGroupLocation)
            Environment: ${{ parameters.Environment }}
            TemplatePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/template.json
            ParametersPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/template.parameters.json
            IsMultiRepoCheckout: true
            TemplateSecrets:
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)
        - template: azure-pipelines-templates/deploy/step/get-apim-subscription-key.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            ApimResourceGroup: $(SharedApimResourceGroup)
            ApimName: $(SharedApimName)
            SubscriptionId: $(UiAppServiceName)
            PipelineVariableName: AssessorApimSubscriptionKey
            IsMultiRepoCheckout: true
        - template: azure-pipelines-templates/deploy/step/generate-config.yml@das-platform-building-blocks
          parameters:
            EnvironmentName: $(EnvironmentName)
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SourcePath: $(Pipeline.Workspace)/das-employer-config/Configuration/das-assessor-service
            StorageAccountName: $(ConfigurationStorageAccountName)
            StorageAccountResourceGroup: $(SharedEnvResourceGroup)
            TargetFileName: '*.schema.json'
            TableName: Configuration
            ConfigurationSecrets:
              AssessorApimSubscriptionKey: $(AssessorApimSubscriptionKey)
              LoginServiceApiClientSecret: $(LoginServiceApiClientSecret)
              LoginServiceClientSecret: $(LoginServiceClientSecret)
              AssessorApiAuthenticationClientSecret: $(AssessorApiAuthenticationClientSecret)
              AssessorApiAuthenticationClientSecret_ExternalApi : $(AssessorApiAuthenticationClientSecret_ExternalApi)
              AssessorApiAuthenticationClientSecret_Web : $(AssessorApiAuthenticationClientSecret_Web)
              AzureApiAuthenticationKey: $(AzureApiAuthenticationKey)
              ReferenceDataApiAuthenticationClientSecret: $(ReferenceDataApiAuthenticationClientSecret)
              RoatpApiAuthenticationClientSecret: $(RoatpApiAuthenticationClientSecret)
              RoatpApiAuthenticationClientSecret_Api : $(RoatpApiAuthenticationClientSecret_Api)
              RoatpApiAuthenticationClientSecret_Web : $(RoatpApiAuthenticationClientSecret_Web)
              SandboxApiAuthenticationClientSecret: $(SandboxApiAuthenticationClientSecret)
              SandboxAssessorApiAuthenticationClientSecret :  $(SandboxAssessorApiAuthenticationClientSecret)
              ApiNotificationsClientToken: $(ApiNotificationsClientToken)
              SessionRedisConnectionString: $(SessionRedisConnectionString)
              CompaniesHouseApiAuthenticationApiKey: $(CompaniesHouseApiAuthenticationApiKey)
              QnaApiAuthenticationClientSecret: $(QnaApiAuthenticationClientSecret)
              QnaApiAuthenticationClientSecret_Api: $(QnaApiAuthenticationClientSecret_Api)
              QnaApiAuthenticationClientSecret_Web: $(QnaApiAuthenticationClientSecret_Web)
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(UiAppServiceName)
            Tenant: $(Tenant)
            IsMultiRepoCheckout: true
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(apiAppServiceName)
            Tenant: $(Tenant)
            IsMultiRepoCheckout: true
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(externalApiAppServiceName)
            Tenant: $(Tenant)
            IsMultiRepoCheckout: true
        - template: azure-pipelines-templates/deploy/step/sql-dacpac-deploy.yml@das-platform-building-blocks
          parameters:
            AzureSubscription: ${{ parameters.ServiceConnection }}
            ServerName: $(SharedSQLServerFQDN)
            SqlUsername: $(SharedSQLServerUsername)
            SqlPassword: $(SharedSQLServerPassword)
            DacpacFile: $(Pipeline.Workspace)/DacpacArtifact/src/SFA.DAS.AssessorService.Database/bin/Output/SFA.DAS.AssessorService.Database.dacpac
            DatabaseName: $(DatabaseName)
            OverrideBlockOnPossibleDataLoss: ${{ parameters.OverrideBlockOnPossibleDataLoss }}
            Environment: ${{ parameters.Environment }}
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(UiAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/SFA.DAS.AssessorService.Web.zip
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(apiAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/SFA.DAS.AssessorService.Application.Api.zip
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(externalApiAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/SFA.DAS.AssessorService.Application.Api.External.zip
- deployment: DeployExternalAPIAPIMResources
  condition: in('${{ parameters.Environment }}', 'AT', 'TEST', 'TEST2', 'PP', 'PROD')
  pool:
    name: DAS - Continuous Deployment Agents
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: AzurePowerShell@5
          displayName: 'Import Swagger Definition'
          inputs:
            azureSubscription: ${{ parameters.ApimServiceConnection }}
            ScriptPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/scripts/Import-APIMSwaggerApiDefinition.ps1
            ScriptArguments: '-ResourceGroupName "$(ApimResourceGroup)" -ServiceName "$(ApimServiceName)" -ApiId "$(externalApiApiId)"  -SwaggerSpecificationUrl "$(externalApiSwaggerUrl)" -ApiUrlSuffix "$(externalApiUrlSuffix)" -ServiceUrl "https://$(externalApiCustomHostname)"'
            azurePowerShellVersion: LatestVersion
            pwsh: true
        - task: AzurePowerShell@5
          displayName: 'Set API Level Policy'
          inputs:
            azureSubscription: ${{ parameters.ApimServiceConnection }}
            ScriptPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/scripts/Set-ApimApiPolicy.ps1
            ScriptArguments: '-ResourceGroupName "$(ApimResourceGroup)" -ServiceName "$(ApimServiceName)" -ApiId "$(externalApiApiId)"  -ApimApiPolicyFilePath "$(ApimApiPolicyFilePath)"'
            azurePowerShellVersion: LatestVersion
            pwsh: true
- deployment: DeploySandboxResources
  condition: in('${{ parameters.Environment }}', 'PP', 'PROD')
  pool:
    name: DAS - Continuous Deployment Agents
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/wait-azure-devops-deployment.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            EnvironmentId: $(Environment.Id)
            PipelineName: $(Build.DefinitionName)
            RunId: $(Build.BuildId)
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: $(SubscriptionId)
            Location: $(ResourceGroupLocation)
            Environment: ${{ parameters.Environment }}
            TemplatePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/active-sandbox-template.json
            ParametersPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/active-sandbox-template.parameters.json
            IsMultiRepoCheckout: true
            TemplateSecrets:
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(ExternalApiActiveSandboxAppServiceName)
            Tenant: $(Tenant)
            IsMultiRepoCheckout: true
        - template: azure-pipelines-templates/deploy/step/sql-dacpac-deploy.yml@das-platform-building-blocks
          parameters:
            AzureSubscription: ${{ parameters.ServiceConnection }}
            ServerName: $(SharedSQLServerFQDN)
            SqlUsername: $(SharedSQLServerUsername)
            SqlPassword: $(SharedSQLServerPassword)
            DacpacFile: $(Pipeline.Workspace)/DacpacArtifact/src/SFA.DAS.AssessorService.Database/bin/Output/SFA.DAS.AssessorService.Database.dacpac
            DatabaseName: $(SandboxDatabaseName)
            OverrideBlockOnPossibleDataLoss: ${{ parameters.OverrideBlockOnPossibleDataLoss }}
            Environment: ${{ parameters.Environment }}
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(InternalApiActiveSandboxAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/SFA.DAS.AssessorService.Application.Api.zip
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(ExternalApiActiveSandboxAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/SFA.DAS.AssessorService.Application.Api.External.zip
        - task: AzurePowerShell@5
          displayName: 'Import Swagger Definition'
          inputs:
            azureSubscription: ${{ parameters.ApimServiceConnection }}
            ScriptPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/scripts/Import-APIMSwaggerApiDefinition.ps1
            ScriptArguments: '-ResourceGroupName "$(ApimResourceGroup)" -ServiceName "$(ApimServiceName)" -ApiId "$(externalApiSandboxApiId)"  -SwaggerSpecificationUrl "$(externalApiSandboxSwaggerUrl)" -ApiUrlSuffix "$(externalApiSandboxUrlSuffix)" -ServiceUrl "https://$(externalApiSandboxCustomHostname)"'
            azurePowerShellVersion: LatestVersion
            pwsh: true
        - task: AzurePowerShell@5
          displayName: 'Set API Level Policy'
          inputs:
            azureSubscription: ${{ parameters.ApimServiceConnection }}
            ScriptPath: $(Pipeline.Workspace)/SFA.DAS.AssessorService/azure/scripts/Set-ApimApiPolicy.ps1
            ScriptArguments: '-ResourceGroupName "$(ApimResourceGroup)" -ServiceName "$(ApimServiceName)" -ApiId "$(externalApiSandboxApiId)"  -ApimApiPolicyFilePath "$(ApimApiPolicyFilePath)"'
            azurePowerShellVersion: LatestVersion
            pwsh: true
